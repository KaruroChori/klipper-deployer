#!/bin/env bun

import { program } from "commander"
import { version } from "../package.json"
import chalk from "chalk"
import { $ } from 'bun'

program.name('klipper-deployer').description('CLI to deploy klipper and its ecosystem on your node.\nUse all for the quick option.').version(version)

//////////////////////////////////////////////
// Quick operations via complete presets
//////////////////////////////////////////////

program.command('presets').description('List all available presets.').action(async () => {
    //Bun globs do not work well with absolute paths sadly.
    const t = (await $`ls ${import.meta.dir}/../templates/profiles/`.quiet()).text().split('\n').filter(x => x !== "")

    for (const file of t) {
        console.log(file.split('.json')[0])
    }
})

program.command('preset').argument('<name>').description('One enter operation using one of the default presets.').action(async (arg0) => {
    try {
        await $`mkdir -p ./config/`.quiet()
        await $`cp -p ${import.meta.dir}/../templates/profiles/${arg0}.json ./config/`.quiet()
        console.log(`Preset copied.`)
    }
    catch (e) {
        console.error(`Cannot copy preset ${arg0}`)
    }
})

//////////////////////////////////////////////
// Normal workflow
//////////////////////////////////////////////

program.command('init').description('Initialize a klipper environment in the current folder.').action(async () => {
    await (await import("../scripts/init.ts")).default()
})

program.command('commit').description('Confirm the current file being edited as source for all next steps.').action(async () => {
    await (await import("../scripts/commit.ts")).default()

})


program.command('clone').description('Clone all repos according to the current configuration').action(async () => {
    await (await import("../scripts/clone.ts")).default()
})

program.command('pull').description('Pull updates for the current repos').action(async () => {
    await (await import("../scripts/pull.ts")).default()
})


program.command('install').description('Install deps for all services needed and prepare global ones.').action(async () => {
    await (await import("../scripts/install.ts")).default()
})

program.command('uninstall').description('Remove venvs for all services and remove global ones.').action(async () => {
    await (await import("../scripts/uninstall.ts")).default()
})


program.command('apply').description('Install all instances for which a folder is not there yet.').option('remove', 'If true, remove instances no longer in the config file', false).action(async (remove) => {
    await (await import("../scripts/apply.ts")).default(remove)

})



//////////////////////////////////////////////
// Operations on services
//////////////////////////////////////////////

program.command('start').description('Start all services').action(async () => {
    await (await import("../scripts/start.ts")).default()
})

program.command('stop').description('Stop all services').action(async () => {
    await (await import("../scripts/stop.ts")).default()
})


//////////////////////////////////////////////
// Convenience operations
//////////////////////////////////////////////

program.command('klipper-shell').description('Open a shell to compile a klipper firmware with the correct env for toolchains.').action(async () => {
    //Old implementation: (await import("../scripts/to-port-over/env-shell.ts"))
    console.warn("TODO")
})

program.command('edit-config').description('Open an editor to change the config file').action(async () => {
    console.warn("TODO")
})

program.command('add-instance').description('Add a new instance to the config file').action(async () => {
    console.warn("TODO")
})

program.command('clean-instance').argument('<id>').description('Remove an instance so that it is reconstructed during the next `apply`').action(async () => {
    console.warn("TODO")
})



console.log(chalk.blue(chalk.italic(`
╭───────────────────────────────────────────────────────╮
│ WIP, most functions are not fully operational yet.    │
│ The interface is likely to change as well.         🍆 │
╰───────────────────────────────────────────────────────╯
`)))

await program.parseAsync()